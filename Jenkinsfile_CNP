#!groovy

@Library("Infrastructure")
import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GithubAPI

def type = "java"
def product = "civil"
def component = "general-applications"
def camundaBranch = "master"
def generalappCCDBranch = "CIV-7014"
def ccddefbranch = "master"

AppPipelineConfig pipelineConf

static Map<String, Object> secret(String secretName, String envVariable) {
    [$class     : 'AzureKeyVaultSecret',
     secretType : 'Secret',
     name       : secretName,
     envVariable: envVariable
    ]
}

def secrets = [
        's2s-${env}': [
                secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_SECRET'),
                secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
                secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
        ],
        'ccd-${env}': [
                secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_IDAM_CLIENT_SECRET'),
                secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
                secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
                secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY')
        ],
        'civil-${env}': [
                secret('microservicekey-civil-service', 'S2S_SECRET'),
                secret('ccd-importer-username', 'CCD_CONFIGURER_IMPORTER_USERNAME'),
                secret('ccd-importer-password', 'CCD_CONFIGURER_IMPORTER_PASSWORD'),
                secret('postgres-user', 'POSTGRES_USER'),
                secret('postgres-password', 'POSTGRES_PASSWORD')
        ]
]

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

def validateRpaContract() {
    sh """ ./gradlew contract """
}

def publishRpaContract() {
    env.PACT_BROKER_FULL_URL="https://pact-broker.platform.hmcts.net/"
    sh """ ./gradlew pactPublish """
}

def checkForEnableHelmLabel(branch_name) {
  return new GithubAPI(this).getLabelsbyPattern(branch_name, "enableHelm").contains("enableHelm")
}

withPipeline(type, product, component) {
    pipelineConf = config
    disableLegacyDeployment()
    enableAksStagingDeployment()

    onPR {
        env.ENVIRONMENT = "preview"
        env.YARN_ENABLE_IMMUTABLE_INSTALLS = false
        loadVaultSecrets(secrets)
       if (!checkForEnableHelmLabel(env.BRANCH_NAME)) {
        enableCleanupOfHelmReleaseAlways();
      }
    }
    onMaster {
        env.ENVIRONMENT = "aat"
        env.YARN_ENABLE_IMMUTABLE_INSTALLS = false
        loadVaultSecrets(secrets)
    }
    onDemo {
        env.YARN_ENABLE_IMMUTABLE_INSTALLS = false
        env.ENVIRONMENT = "demo"
        loadVaultSecrets(secrets)
    }

    afterAlways('checkout') {
        onMaster {
            withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', usernameVariable: 'USERNAME', passwordVariable: 'BEARER_TOKEN')]) {
                try {
                    sh '''
            set -e

            git remote set-url origin $(git config remote.origin.url | sed "s/github.com/${BEARER_TOKEN}@github.com/g")

            git fetch origin demo:demo
            git push --force origin HEAD:demo
          '''
                } catch (err) {
                    notifyBuildEvent channel: '#civil_notifications', color: 'warning', message: 'Failed to update demo branch'
                }
            }
        }
    }

    before('smoketest:preview') {
        validateRpaContract()
        sh """
          eval \$(./bin/variables/load-preview-environment-variables.sh ${CHANGE_ID})
          ./bin/add-roles.sh
          ./bin/pull-latest-release-asset.sh civil-ccd-definition civil-ccd-definition.zip
          ./bin/pull-latest-general-app-ccd-files.sh ${generalappCCDBranch}
          ./bin/pull-latest-release-asset.sh civil-camunda-bpmn-definition civil-camunda-bpmn-definition.zip
          ./bin/import-ccd-definition.sh "-e *-prod.json,*HNL-nonprod.json,*CUI-nonprod.json" ${ccddefbranch}
          ./bin/import-general-apps-ccd-definition.sh "-e *-prod.json"
          ./bin/pull-latest-camunda-files.sh ${camundaBranch}
        """
        env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
        env.URL="https://xui-civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        env.CIVIL_GENERAL_APPLICATIONS_URL="https://civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        env.CIVIL_SERVICE_URL="https://civil-service-civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
        env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
        env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    }

    afterAlways('smoketest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
    }

    before('functionalTest:preview') {
      env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
      env.URL="https://xui-civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CIVIL_GENERAL_APPLICATIONS_URL="https://civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.CIVIL_SERVICE_URL="https://civil-service-civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
      env.CCD_DATA_STORE_URL = "https://ccd-data-store-api-civil-general-applications-pr-${CHANGE_ID}.preview.platform.hmcts.net"
      env.DM_STORE_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    }

    afterAlways('functionalTest:preview') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    }

    afterAlways('functionalTest:aat') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
    }

    before('smoketest:aat') {
        validateRpaContract()
        sh """
          eval \$(./bin/variables/load-staging-environment-variables.sh)
          ./bin/add-roles.sh
          ./bin/pull-latest-release-asset.sh civil-ccd-definition civil-ccd-definition.zip
          ./bin/pull-latest-general-app-ccd-files.sh ${generalappCCDBranch}
          ./bin/pull-latest-release-asset.sh civil-camunda-bpmn-definition civil-camunda-bpmn-definition.zip
          ./bin/import-ccd-definition.sh "-e *-prod.json,*HNL-nonprod.json,*CUI-nonprod.json" ${ccddefbranch}
          ./bin/import-general-apps-ccd-definition.sh "-e *-prod.json"
          ./bin/pull-latest-camunda-files.sh ${camundaBranch}
        """
        env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
        env.URL="https://civil-ga-xui-staging.aat.platform.hmcts.net"
        env.CIVIL_GENERAL_APPLICATIONS_URL="https://civil-general-applications-staging.aat.platform.hmcts.net"
        env.CIVIL_SERVICE_URL="https://civil-ga-civil-service-staging-aat.service.core-compute-aat.internal"
        env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
        env.SERVICE_AUTH_PROVIDER_API_BASE_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
        env.CCD_DATA_STORE_URL = "https://civil-ga-data-store-staging-aat.service.core-compute-aat.internal"
        env.DM_STORE_URL = "https://dm-store-aat.service.core-compute-aat.internal"
    }

  afterAlways('smoketest:aat') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/smokeTest/**/*'
  }

    onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }
}
